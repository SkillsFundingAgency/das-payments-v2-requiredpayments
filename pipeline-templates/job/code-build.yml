parameters:
  TargetProjects: 'src/**/*.csproj'
  

jobs:
- job: CodeBuild
  pool:
    name: SLD Build pool
  variables:
  - group: BUILD Management Resources
  - name: SolutionBaseName
    value: SFA.DAS.Payments.RequiredPayments
  steps:
  - template: /azure-pipelines-templates/build/step/gitversion.yml


  - task: NuGetCommand@2
    displayName: Nuget Restore
    inputs:
      command: restore
      projects: ${{ parameters.TargetProjects }}
      noCache: true
      feedsToUse: 'select'
      vstsFeed: 'dct-pkg'

  - task: DotNetCoreCLI@2
    displayName: Dotnet Restore
    inputs:
      command: restore
      projects: ${{ parameters.TargetProjects }}
      noCache: true
      feedsToUse: 'select'
      vstsFeed: 'dct-pkg'
    
  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      projects:  ${{ parameters.TargetProjects }}
      arguments: '--configuration $(buildConfiguration) --no-restore'

  - task: MSBuild@1
    displayName: 'Build sln'
    inputs:
      solution: 'src/SFA.DAS.Payments.RequiredPayments.sln'
      msbuildArchitecture: x64
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'
      msbuildArguments: '/p:version=$(Build.BuildNumber) /p:FileVersion=$(Build.BuildNumber)'
      clean: true
      maximumCpuCount: true
      logProjectEvents: true
      createLogFile: true

  - task: DotNetCoreCLI@2
    displayName: 'dotnet build UnitTest Projects'
    inputs:
      command: build
      projects: '**/*unittest*.csproj'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet test UnitTest Projects'
    inputs:
      command: test
      projects: '**/*unittest*.csproj'
      arguments: '--filter FullyQualifiedName~UnitTests'

  

  - task: MSBuild@1
    displayName: 'Build solution'
    inputs:
      solution: 'src/SFA.DAS.Payments.RequiredPayments.ServiceFabric/SFA.DAS.Payments.RequiredPayments.ServiceFabric.sfproj'
      msbuildArchitecture: x64
      configuration: '$(BuildConfiguration)'
      msbuildArguments: '/p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /t:Package /p:PackageLocation="$(build.artifactstagingdirectory)\ApplicationPackage" /p:version=$(Build.BuildNumber) /p:FileVersion=$(Build.BuildNumber)'
      maximumCpuCount: true
      logProjectEvents: true
      createLogFile: true
      continueOnError: true

  

  - task: DeleteFiles@1
    displayName: 'Delete Symbols files from Artifact Folder '
    inputs:
      SourceFolder: '$(build.artifactstagingdirectory)/ApplicationPackage/'
      Contents: '**/*ApplicationPackage*/*.fdb'
      continueOnError: true

  - task: ServiceFabricUpdateManifests@2
    displayName: 'Update Service Fabric Manifests (Manifest versions)'
    inputs:
      applicationPackagePath: '$(build.artifactstagingdirectory)/ApplicationPackage'
      versionBehavior: Replace
      continueOnError: true

  - task: CopyFiles@2
    displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
    inputs:
      Contents: |
        pipeline-templates/scripts/**    
      TargetFolder: '$(build.artifactstagingdirectory)/publish'
      OverWrite: true
      CleanTargetFolder: true
      flattenFolders: true  
      continueOnError: true

  

  - task: CopyFiles@2 
    displayName: 'Copy Nuget Files to: Artifact Nuget Directory'
    inputs:
     Contents: |
       **\*.nupkg
       !**\packages\**
       !**\bin\x64\**
     TargetFolder: '$(build.artifactstagingdirectory)/NugetPackages'
     OverWrite: true
     CleanTargetFolder: true
     flattenFolders: true
     continueOnError: true
     

  - task: CopyFiles@2
    displayName: 'Copy ApplicationParameters Files to: Artifact ApplicationParameters Directory'
    inputs:
      Contents: 'src/SFA.DAS.Payments.RequiredPayments.ServiceFabric/ApplicationParameters/*.xml'
      TargetFolder: '$(build.artifactstagingdirectory)/ApplicationParameters'
      OverWrite: true
      CleanTargetFolder: true
      flattenFolders: true
      continueOnError: true
      
      

  - task: CopyFiles@2
    displayName: 'Copy PublishProfiles Files to: Artifact PublishProfiles Directory'
    inputs:
      Contents: 'src/SFA.DAS.Payments.RequiredPayments.ServiceFabric/PublishProfiles/*.xml'
      TargetFolder: '$(build.artifactstagingdirectory)/PublishProfiles'
      OverWrite: true
      CleanTargetFolder: true
      flattenFolders: true
      continueOnError: true
      
      

  #- task: PublishPipelineArtifact@1
  #  displayName: 'Publish Artifact: drop'
  #  inputs:
  #    targetPath: '$(build.artifactstagingdirectory)'
  #    artifact: drop

  - task: PublishPipelineArtifact@1
    displayName: 'Publish Pipeline Artifact - Provider Adjustments'
    inputs:
      targetPath: $(build.artifactstagingdirectory)
      artifact: requiredpayments
      continueOnError: true